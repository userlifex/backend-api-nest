// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid     String @id @default(uuid())
  id       Int    @unique @default(autoincrement())
  username String @unique
  email    String @unique
  password String
  role     String

  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  address   String?

  tokens Token[]
  orders Order[]
  cart   CartProduct[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Token {
  uuid      String    @id @default(uuid())
  id        Int       @unique @default(autoincrement())
  token     String
  tokenType TokenType @map("token_type")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userUuid String @map("user_uuid")
  user     User   @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("tokens")
}

model Product {
  uuid        String  @id @default(uuid())
  id          Int     @unique @default(autoincrement())
  name        String
  price       Float
  stock       Int
  description String?
  imgUrl      String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cart   CartProduct[]
  orders OrderProduct[]

  @@map("products")
}

model Order {
  uuid      String   @id @default(uuid())
  id        Int      @unique @default(autoincrement())
  total     Float
  orderDate DateTime @default(now()) @map("order_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userUuid String @map("user_uuid")
  user     User   @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  products OrderProduct[]
  @@map("orders")
}

model OrderProduct {
  uuid String @id @default(uuid())
  id   Int    @unique @default(autoincrement())

  orderUuid String @map("order_uuid")
  order     Order  @relation(fields: [orderUuid], references: [uuid], onDelete: Cascade)

  productUuid String  @map("product_uuid")
  product     Product @relation(fields: [productUuid], references: [uuid], onDelete: Cascade)

  quantity  Int
  salePrice Float @map("sale_price")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_products")
}

model CartProduct {
  uuid     String @id @default(uuid())
  id       Int    @unique @default(autoincrement())
  quantity Int

  userUuid String @map("user_uuid")
  user     User   @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  productUuid String  @map("product_uuid")
  product     Product @relation(fields: [productUuid], references: [uuid], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum TokenType {
  REFRESH
  ACCESS
  RECOVERY
  VERIFY
}

enum Role {
  ADMIN
  USER
}
